---
{{- if empty .Values.secret.name }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "ansible-semaphore.secretName" . }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace "ansible-semaphore") | default dict }}
  # set $jwtSecret to existing secret data or generate a random one when not exists
  {{- $dbPassword := (get $secret "ansible-semaphore") | default (randAlphaNum 32 ) }}
  {{- $semaphoreAdminPassword := (get $secret "ansible-semaphore") | default (randAlphaNum 32 ) }}
  # generate 32 chars long random string, base64 encode it and then double-quote the result string.
  dbPassword: {{ $dbPassword | b64enc | quote }}
  semaphoreAdminPassword: {{ $semaphoreAdminPassword | b64enc | quote }}
{{- end }}
